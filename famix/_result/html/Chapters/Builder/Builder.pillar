{
	"profile" : [
		{
			"name": "John Doe",
	 		"avatar": "avatar.png",
     			"post": "Research Engineer",
     			"firm": "Space Laboratory"
		}
	]

}


!!Builder
@ch:Builder

!!!Creation of a builder
@ch:creationOfABuilder

The primary class of the metamodel builder is named ==FamixMetamodelBuilder==. There are several ways how instances of this class can be created. 

!!!!Builder for real environment

If builders are created using the standard ==new== message sent to the ==FamixMetamodelBuilder== class, builder will work on real environment (implemented in class FamixMetamodelBuilderRealEnvironment). That means that all classes generated by the builder will be installed directly to the Pharo image and models can be instantiated from them.

[[[­lan­gua­ge=­Sma­lltalk
builder := FamixMetamodelBuilder new.
]]]

!!!!Builder for testing environment

The other option is to create a builder that is bound to a ''Ring'' environment, and all generated classes a part of this environment. It is used mainly for testing purposes because it does not modify any classes in the system, it is faster and the tests do not need to do a difficult cleanup. Such generated ''Ring'' environments can be used for other purposes like the direct export of the generated package too. 

On the other hand, it is not possible to instantiate such generated classes so no real model can be created from them.

[[[­lan­gua­ge=­Sma­lltalk
builder := FamixMetamodelBuilder forTesting.
]]]

!!!!Code generation

The code is generated using the message ==generate== sent to the builder. If no element of the meta-model is created then it will not do anything useful. 

[[[­lan­gua­ge=­Sma­lltalk
builder := FamixMetamodelBuilder new.
builder generate.
]]]

Although the builder instances can be used directly in a method or in a script that generates your meta-model, in most cases the builder is created as an instance variable of a subclass ==FamixMetamodelGenerator== because then the meta-model definition can be split into several methods or classes (see chapter *@ch:codeGenerationManagement*).



!!!Builder settings
@ch:builderSettings

We need to specify into which package the generated classes will be placed. It can be done using the message ==packageName:== sent to a builder. If not set, a default value (==FamixMetamodelBulder-Generated==) will be used.

Then we should specify a class name prefix. It is a prefix that will be added before the name of every generated class. 

[[[­lan­gua­ge=­Sma­lltalk
builder 
    prefix: 'SQLMeta';
    packageName: 'SQL-Metamodel'.
]]]

In the definition of the meta-model, the class names are used without a prefix which makes orientation in the code of the meta-model easier. However, the name of real classes includes the specified prefix. Keep that in mind when you use such classes from a non-generated code.

The default prefix is empty.
 
!!!!Class tags

By default, the classes a generated with a tag ''Entities'' so in our case, the classes are placed in a category named ''SQL-Metamodel-Entities''. The traits generated by the builder have a tag 'Traits'. The names of tags for entities and traits can be modified (messages ==classTag:== and ==traitTag:== and it is valid from this point for all the future specified classes. 

The tag can be set for classes and traits individually using the message ==tag:==

!!!!Basic superclasses

When a generalization of a class is not specified, a default superclass is used (==MooseEntity==). When the builder is used for generation of meta-models independent of Moose, or if the builder serves for generation of a meta-model which extends another meta-model, some other class can be selected as a default superclass (message ==basicSuperclassName:==).

For stateful traits (that mostly look as standard classes) a default superclass is different. It can be set using the message ==defaultBasicTraitName:== and the default value is ==Trait==. It is not recommended to change it. 

Keep in mind that the basic superclasses and traits are expected to provide some behavior (e.g. class slots initialization) so be careful when you change them.
