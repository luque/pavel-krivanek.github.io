Object subclass: #JSObjectProxy	instanceVariableNames: ''	classVariableNames: 'CallbackProcess CallbackSemaphore'	package: 'WebPlatform'!!JSObjectProxy methodsFor: 'as yet unclassified'!asSymbol	^self asString asSymbol! !!JSObjectProxy methodsFor: 'as yet unclassified'!evaluate: source	| result |	JS at: #messageReceiver put: self.	(JS messageReceiver)		at: #messageFunction		put: (JS Function new: source).	result := JS messageReceiver messageFunction.	(JS Function new: 'delete messageReceiver.messageFunction') call.	(JS Function new: 'delete messageReceiver') call.	^result! !!JSObjectProxy methodsFor: 'as yet unclassified'!break: message	self ifConnected: [		self console log: message.		self			alert: message;			debugger]! !!JSObjectProxy methodsFor: 'as yet unclassified'!asArray	| array |	array := Array new: self length.	1		to: self length		do: [:index |			array				at: index				put: (self at: index - 1)].	^array! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected ifNotConnected: notConnected	[self top]		on: Error		do: [:exception | ^notConnected value].	^connected value! !!JSObjectProxy methodsFor: 'as yet unclassified'!name	^self evaluate: 'return this.name'! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveSqueakAsJSObject: object	<primitive: 117> #(JavaScriptPlugin primitiveSqueakAsJSObject 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!stringify	^(JS window JSON stringify: self) asString! !!JSObjectProxy methodsFor: 'as yet unclassified'!asString	"Convert me to a string"	<primitive: 117> #(JavaScriptPlugin primitiveAsString 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!counterpart	"Answer an instance of a Smalltalk class that corresponds to my constructor, and which provides API documentation and live interaction."	^JSObject counterpartFor: self! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveNewWithParameters: parameters	<primitive: 117> #(JavaScriptPlugin primitiveNewWithParameters 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey put: aValue	"set a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAtPut 0 0) at: 1.	^ self with: aValue retry: [:val | self at: aKey put: val]! !!JSObjectProxy methodsFor: 'as yet unclassified'!removeKey: key	^self evaluate: 'delete this.', key! !!JSObjectProxy methodsFor: 'as yet unclassified'!typeof	"Answer my jsObject's type (a string)"	<primitive: 117> #(JavaScriptPlugin primitiveTypeof 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey	"get a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAt 0 0) at: 1.	(error := self primGetError)		ifNotNil: [^ self error: error].	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!doesNotUnderstand: aMessage	"Call a function, or get/set an existing property. The function name / property name is the message selector up to the first colon. If the function name is 'new', create a new instance and call the constructor with args."	<primitive: 117> #(JavaScriptPlugin primitiveDoUnderstand 0 0) at: 1.	^self with: aMessage arguments retry: [:args |		self doesNotUnderstand: (Message selector: aMessage selector arguments: args)]! !!JSObjectProxy methodsFor: 'as yet unclassified'!constructor	^self at: 'constructor'! !!JSObjectProxy methodsFor: 'as yet unclassified'!newWithParameters: parameters	| parametersJS |	parametersJS := JS Array new.	parameters do: [:parameter | parametersJS push: parameter asJSArgument].	^(self primitiveNewWithParameters: parametersJS) counterpart! !!JSObjectProxy methodsFor: 'as yet unclassified'!debugger	(JS Function new: 'debugger') call! !!JSObjectProxy methodsFor: 'as yet unclassified'!asJSArgument	^ self! !!JSObjectProxy methodsFor: 'as yet unclassified'!isConnected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: [true]		ifNotConnected: [false]! !!JSObjectProxy methodsFor: 'as yet unclassified'!with: argument retry: retryBlock	| error |	(error := self primGetError) ifNil: [^ self error: 'JSBridge error'].	(error beginsWith: 'asJSArgument') ifTrue: [		^retryBlock value: argument asJSArgument].	(error beginsWith: 'CallbackSemaphore') ifTrue: [		self class initCallbacks.		^retryBlock value: argument].	self error: error.! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: connected		ifNotConnected: [nil]! !!JSObjectProxy methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!foobly	<primitive: 'primitiveFoobly' module: 'JavaScriptPlugin'>	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!isIdenticalTo: proxy	| object |	object := JS Object new.	object		at: #firstThing put: self;		at: #secondThing put: proxy;		at: #comparison put: (JS Function new: 'return this.firstThing == this.secondThing').	^object comparison! !!JSObjectProxy methodsFor: 'as yet unclassified'!printOn: aStream	[aStream nextPutAll: self asString]		ifError: [:err :rcvr | ^ super printOn: aStream].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSObjectProxy class	instanceVariableNames: ''!!JSObjectProxy class methodsFor: 'as yet unclassified'!evaluate: source	^(JS Function new: 'return ', source, ';') call! !!JSObjectProxy class methodsFor: 'as yet unclassified'!new	self error: 'Use "JS Object new" to create a new JavaScript object'.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initialize	"Create the JS global"	Smalltalk at: #JS put: self basicNew.	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self openExamples]		ifFalse: [[self openExamples] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!handleCallback	| block |	block := self primGetActiveCallbackBlock.	block		ifNil: [			Transcript				cr;				nextPutAll: 'active JavaScript callback block got nulled';				endEntry]		ifNotNil: [			| args result |			args := self primGetActiveCallbackArgs.			[result := block valueWithArguments: args] ifError: [:error :receiver |				ActiveWorld halt: error asString.				result := JS Error: error asString].			self primReturnFromCallback: result]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initCallbacks	CallbackProcess ifNotNil: [CallbackProcess terminate. CallbackProcess := nil].	CallbackSemaphore := Semaphore new.	self primInitCallbacks: (Smalltalk registerExternalObject: CallbackSemaphore).	CallbackProcess := [self callbackProcess] newProcess		priority: Processor lowIOPriority; resume.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!callbackProcess	[true] whileTrue: [		CallbackSemaphore wait.		[self handleCallback] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primReturnFromCallback: returnValue	<primitive: 117> #(JavaScriptPlugin primitiveReturnFromCallback 0 0) at: 1.	(self primGetError = 'No active callback') ifFalse: [self primitiveFailed]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primInitCallbacks: semaIndex	<primitive: 117> #(JavaScriptPlugin primitiveInitCallbacks 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!openExamples	Workspace new		contents: 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:', self examples;		openLabel: 'JSBridge'.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackArgs	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackArgs 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!examples	| comment |	"Create symbols in advance"	('alert: console log: document getElementsByTagName: navigator Object keys: Function length setTimeout:ms: createElement: appendChild: jQuery: hide: show: css: click: appendTo:'		findTokens: ' ') do: [:s | s asSymbol].	comment := self organization classComment asString.	^ comment copyFrom: (comment indexOf: $") to: comment size.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackBlock	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackBlock 0 0) at: 1.	^nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !OSEnvironment subclass: #WebEnvironment	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!!WebEnvironment commentStamp: '<historical>' prior: 0!I am a copy of class UnixEnvironment. This comment is copied from there, and might not be entirely accurateI am a specialized OSEnvironment version for *nix systems (Linux, OSX).See my superclass to understand my common usage.# Encoding ManagementI provide a variant of the Dictionary-like API that receives an extra argument specifying an encoding.Valid encodings are those specified by the Zinc-Character-Encoding-* packages.The API accepts both encoding objects and symbols which are used to lookup encodings.For example, the following usages are valid:OSEnvironment current at: 'HOME' encoding: #utf8.OSEnvironment current at: 'HOME' encoding: #utf8 asZnCharacterEncoder.OSEnvironment current at: 'HOME' encoding: ZnCharacterEncoder utf8.# Implementation DetailsI try to use a primitive to get/set environment variables, and if it fails or it is not available, I use corresponding ffi calls using byteArrays with encoded strings as argument.!!WebEnvironment methodsFor: 'enumeration' stamp: 'pk 11/23/2019 22:07'!keysAndValuesDo: aBlock	| index associationString  |	index := 1	.	[ 		associationString := self environAt: index.		associationString ifNil: [ ^ self ].		self keysAndValuesDo: aBlock withAssociationString: associationString.		index := index + 1	] repeat.! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:11'!basicGetEnvRaw: encodedVariableName	^ nil! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:07'!environ	"Return the address of the array holding the environment variables"	^ FFIExternalArray 		fromPointer: (ExternalAddress loadSymbol: 'environ' from: LibC)		type: String! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:12'!setEnv: nameString value: valueString	"This method calls the Standard C Library setenv() function"	^ self primitiveFailed! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:12'!unsetEnv: string	 ^ self primitiveFailed! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:11'!basicGetEnvRawViaFFI: arg1	^ self primitiveFailed! !!WebEnvironment methodsFor: 'private' stamp: 'pk 11/23/2019 22:07'!environAt: index	^ self environ at: index! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey ifAbsent: aBlock	"See super>>at:ifAbsent:.	Uses a single encoding determined dinamically"	^ self at: aKey encoding: self defaultEncoding ifAbsent: aBlock! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey ifAbsent: aBlock	"Gets the value of an environment variable called `anEncodedKey` that is already encoded (i.e., it is a byte array).	Execute aBlock if absent.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		| rawValue |	rawValue := self basicGetEnvRaw: anEncodedKey asString.	^ rawValue		ifNil: [ aBlock value ]		ifNotNil: [ rawValue asByteArray ].! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey encoding: anEncoding ifPresent: aBlock	"Gets the value of an environment variable called `aKey` and invoke aBlock with it.	Return nil if absent.	Use `anEncoding` to encode the arguments and return values.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ aBlock value: (self at: aKey encoding: anEncoding ifAbsent: [ ^ nil ])! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey encoding: anEncoding ifAbsentPut: aBlock	"Gets the value of an environment variable called `aKey`.	If absent, insert the value given by aBlock.	Use `anEncoding` to encode the arguments and return values.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ self at: aKey encoding: anEncoding ifAbsent: [ self at: aKey put: aBlock value encoding: anEncoding ]! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey put: aValue	"See super>>at:put:.	Uses a single encoding determined dinamically"	^ self at: aKey put: aValue encoding: self defaultEncoding! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey ifPresent: presentBlock ifAbsent: absentBlock	"Gets the value of an environment variable called `anEncodedKey` that is already encoded (i.e., it is a byte array).	Call presentBlock with it if present.	Execute absentBlock if absent.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		self rawAt: anEncodedKey ifPresent: [ :v | ^ presentBlock cull: v ].	^absentBlock value! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey ifPresent: aBlock	"Gets the value of an environment variable called `anEncodedKey` that is already encoded (i.e., it is a byte array) and invoke aBlock with it.	Return nil if absent.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ aBlock value: (self rawAt: anEncodedKey ifAbsent: [ ^ nil ])! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey	"Gets the value of an environment variable called `anEncodedKey` that is already encoded (i.e., it is a byte array).	Throws a KeyNotFound exception if not found.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ self rawAt: anEncodedKey ifAbsent: [ KeyNotFound signalFor: anEncodedKey ]! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey put: someBytes	"Sets the value of an environment variable called `anEncodedKey` to `someBytes`.	Both arguments should be already encoded (i.e., they are byte arrays).		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."	^ self setEnv: anEncodedKey asString value: someBytes asString! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!removeKey: key	"See super>>removeKey:.	Uses a single encoding determined dinamically"		^ self removeKey: key encoded: self defaultEncoding! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!removeKey: key encoded: anEncoding	"Removes the entry `aKey` from the environment variables.	Use `anEncoding` to encode the arguments.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."	^ self rawRemoveKey: (key encodeWith: anEncoding)! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey encoding: anEncoding ifAbsent: aBlock	"Gets the value of an environment variable called `aKey`.	Execute aBlock if absent.	Use `anEncoding` to encode the arguments and return values.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		| result |	result := self		rawAt: (aKey encodeWith: anEncoding)		ifAbsent: [ ^ aBlock value].	^ result decodeWith: anEncoding! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!defaultEncoding	^ ZnCharacterEncoder utf8! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawAt: anEncodedKey ifAbsentPut: aBlock	"Gets the value of an environment variable called `aKey` that is already encoded (i.e., it is a byte array).	If absent, insert the value given by aBlock.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ self rawAt: anEncodedKey ifAbsent: [ self rawAt: anEncodedKey put: aBlock value ]! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey encoding: anEncoding	"Gets the value of an environment variable called `aKey`.	Throws a KeyNotFound exception if not found.	Use `anEncoding` to encode the arguments and return values.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		^ self at: aKey encoding: anEncoding ifAbsent: [ KeyNotFound signalFor: aKey ]! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey put: aValue encoding: anEncoding	"Sets the value of an environment variable called `aKey` to `aValue`.	Use `anEncoding` to encode both arguments.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."	^ self		rawAt: (aKey encodeWith: anEncoding)		put: (aValue encodeWith: anEncoding)! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!rawRemoveKey: anEncodedKey	"Removes an environment variable called `anEncodedKey` that is already encoded (i.e., it is a byte array).		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."	^ self unsetEnv: anEncodedKey asString! !!WebEnvironment methodsFor: 'accessing' stamp: 'pk 11/23/2019 22:07'!at: aKey encoding: anEncoding ifPresent: presentBlock ifAbsent: absentBlock	"Gets the value of an environment variable called `aKey`.	Call presentBlock with it if present.	Execute absentBlock if absent.	Use `anEncoding` to encode the arguments and return values.		This is a *nix specific API.	Rationale: In *nix systems (compared to windows systems) environment variables are stored as raw bytes and can be encoded in different forms."		self at: aKey encoding: anEncoding ifPresent: [ :v | ^ presentBlock cull: v ].	^absentBlock value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebEnvironment class	instanceVariableNames: ''!!WebEnvironment class methodsFor: 'testing' stamp: 'pk 11/23/2019 22:10'!isDefaultFor: aPlatform	^  aPlatform isWeb! !Unix32Platform subclass: #WebPlatform	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!!WebPlatform methodsFor: 'accessing' stamp: 'pk 11/14/2019 21:00'!currentWorkingDirectoryPathWithBufferSize: ignored	^'/'! !!WebPlatform methodsFor: 'accessing'!family	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."	#Web! !!WebPlatform methodsFor: 'accessing' stamp: 'pk 11/20/2019 22:00'!isWeb	^  true! !!WebPlatform methodsFor: 'accessing'!getPwdViaFFI: buffer size: bufferSize	buffer		replaceFrom: 1		to: '/SqueakJS' size		with: '/SqueakJS';		at: '/SqueakJS' size + 1		put: (Character value: 0)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebPlatform class	instanceVariableNames: ''!!WebPlatform class methodsFor: 'private'!isActivePlatform	"Answer whether the receiver is the active platform"	^ self currentPlatformName = 'Web'! !UnixResolver subclass: #WebResolver	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!!WebResolver methodsFor: 'private' stamp: 'pk 11/20/2019 22:33'!directoryFromEnvVariableNamed: aString	^ '/' asFileReference! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebResolver class	instanceVariableNames: ''!!WebResolver class methodsFor: 'accessing' stamp: 'pk 11/14/2019 21:04'!platformName	^  'Web'! !JSObjectProxy initialize!'From Pharo8.0.0 of 22 November 2019 [Build information: Pharo-8.0.0+build.1005.sha.67ee90b6556690fa31999ec493d050f8f43c40a9 (32 Bit)] on 23 November 2019 at 10:13:01.080741 pm'!!OSPlatform methodsFor: '*WebPlatform' stamp: 'pk 11/23/2019 22:11'!isWeb	^ false! !