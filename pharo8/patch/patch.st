#('FFI-Kernel' 'UnifiedFFI' 'Alien-Core') do: [ :name | name asPackage definedClasses do: [ :aClass |  SessionManager default unregisterClassNamed: aClass name ] ].SessionManager default unregisterClassNamed: #FT2Handle.SessionManager default unregisterClassNamed: #Stdio.SessionManager default unregisterClassNamed: #OmStoreFactory.SessionManager default unregisterClassNamed: #OmSessionStore.SessionManager default unregisterClassNamed: #LGitLibrary.EpMonitor current disable.FreeTypeSystemSettings loadFt2Library: false.	World submorphs do: #delete.	TaskbarMorph reset.	MenubarMorph reset.!!LargePositiveInteger methodsFor: 'bit manipulation'!hashMultiply	"This is a multiplication of hashes by 1664525 mod 2^28 written to avoid overflowing into large integers.	 The primitive is able to perform the operation with modulo arihmetic.		Example of usage:	  hash	    ^ (super hash + variableName hash) hashMultiply 		"		"<primitive: 159>"	"Truncate to 28 bits and try again"	^(self bitAnd: 16rFFFFFFF) hashMultiply! !!SmallInteger methodsFor: 'bit manipulation'!hashMultiply	"This is a multiplication of hashes by 1664525 mod 2^28 written to avoid overflowing into large integers.	 The primitive is able to perform the operation with modulo arihmetic.		Example of usage:	  hash	    ^ (super hash + variableName hash) hashMultiply 		"			"<primitive: 159>"	| low |	low := self bitAnd: 16383.	^(16r260D * low + ((16r260D * (self bitShift: -14) + (16r0065 * low) bitAnd: 16383) * 16384))			bitAnd: 16r0FFFFFFF! !!VirtualMachine methodsFor: 'testing'!isRunningCogit	 ^false ! !!VirtualMachine methodsFor: 'parameters'!parameterAt: parameterIndex	<primitive: 254>	^  nil! !!FFICallout class methodsFor: 'class initialization'!initialize       	^ self! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:39:38.639779 am'!!VirtualMachine methodsFor: 'attributes'!wordSize	^ 4! !!SystemVersion methodsFor: 'accessing - version strings'!shortVersionString	"Print a short version string."	^ 'Pharo8.0.0'! !!SmalltalkImage methodsFor: 'sources, change log'!lastUpdateString	"SmalltalkImage current lastUpdateString"	^'Build information: '! !!File class methodsFor: 'private'!primFileMasks	^  #(61440 49152 40960 32768 24576 16384 8192 4096)! !!VirtualMachine methodsFor: 'accessing'!interpreterSourceVersion	^  'VM: 201902062351 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed Feb 6 15:51:18 2019 CommitHash: a838346b Plugins: 201902062351 https://github.com/OpenSmalltalk/opensmalltalk-vm.git'! !!LocalTimeZone methodsFor: 'primitives'!primOffset	^ 0! !        'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 1:08:21.062115 am'!!Locale methodsFor: 'system primitives'!primTimezone	^0! !!UnixResolver class methodsFor: 'accessing'!platformName	^  'Web'! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 9:27:43.84735 pm'!!DiskStore class methodsFor: 'system startup'!checkVMVersion	! !"-------------------------------------------------------------"Object subclass: #JSObjectProxy	instanceVariableNames: ''	classVariableNames: 'CallbackProcess CallbackSemaphore'	package: 'WebPlatform'!!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey put: aValue	"set a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAtPut 0 0) at: 1.	^ self with: aValue retry: [:val | self at: aKey put: val]! !!JSObjectProxy methodsFor: 'as yet unclassified'!asString	"Convert me to a string"	<primitive: 117> #(JavaScriptPlugin primitiveAsString 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!removeKey: key	^self evaluate: 'delete this.', key! !!JSObjectProxy methodsFor: 'as yet unclassified'!evaluate: source	| result |	JS at: #messageReceiver put: self.	(JS messageReceiver)		at: #messageFunction		put: (JS Function new: source).	result := JS messageReceiver messageFunction.	(JS Function new: 'delete messageReceiver.messageFunction') call.	(JS Function new: 'delete messageReceiver') call.	^result! !!JSObjectProxy methodsFor: 'as yet unclassified'!typeof	"Answer my jsObject's type (a string)"	<primitive: 117> #(JavaScriptPlugin primitiveTypeof 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!constructor	^self at: 'constructor'! !!JSObjectProxy methodsFor: 'as yet unclassified'!printOn: aStream	[aStream nextPutAll: self asString]		ifError: [:err :rcvr | ^ super printOn: aStream].! !!JSObjectProxy methodsFor: 'as yet unclassified'!asSymbol	^self asString asSymbol! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected ifNotConnected: notConnected	[self top]		on: Error		do: [:exception | ^notConnected value].	^connected value! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveSqueakAsJSObject: object	<primitive: 117> #(JavaScriptPlugin primitiveSqueakAsJSObject 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey	"get a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAt 0 0) at: 1.	(error := self primGetError)		ifNotNil: [^ self error: error].	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!asArray	| array |	array := Array new: self length.	1		to: self length		do: [:index |			array				at: index				put: (self at: index - 1)].	^array! !!JSObjectProxy methodsFor: 'as yet unclassified'!name	^self evaluate: 'return this.name'! !!JSObjectProxy methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!counterpart	"Answer an instance of a Smalltalk class that corresponds to my constructor, and which provides API documentation and live interaction."	^JSObject counterpartFor: self! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveNewWithParameters: parameters	<primitive: 117> #(JavaScriptPlugin primitiveNewWithParameters 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!stringify	^(JS window JSON stringify: self) asString! !!JSObjectProxy methodsFor: 'as yet unclassified'!isIdenticalTo: proxy	| object |	object := JS Object new.	object		at: #firstThing put: self;		at: #secondThing put: proxy;		at: #comparison put: (JS Function new: 'return this.firstThing == this.secondThing').	^object comparison! !!JSObjectProxy methodsFor: 'as yet unclassified'!foobly	<primitive: 'primitiveFoobly' module: 'JavaScriptPlugin'>	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!with: argument retry: retryBlock	| error |	(error := self primGetError) ifNil: [^ self error: 'JSBridge error'].	(error beginsWith: 'asJSArgument') ifTrue: [		^retryBlock value: argument asJSArgument].	(error beginsWith: 'CallbackSemaphore') ifTrue: [		self class initCallbacks.		^retryBlock value: argument].	self error: error.! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: connected		ifNotConnected: [nil]! !!JSObjectProxy methodsFor: 'as yet unclassified'!doesNotUnderstand: aMessage	"Call a function, or get/set an existing property. The function name / property name is the message selector up to the first colon. If the function name is 'new', create a new instance and call the constructor with args."	<primitive: 117> #(JavaScriptPlugin primitiveDoUnderstand 0 0) at: 1.	^self with: aMessage arguments retry: [:args |		self doesNotUnderstand: (Message selector: aMessage selector arguments: args)]! !!JSObjectProxy methodsFor: 'as yet unclassified'!debugger	(JS Function new: 'debugger') call! !!JSObjectProxy methodsFor: 'as yet unclassified'!newWithParameters: parameters	| parametersJS |	parametersJS := JS Array new.	parameters do: [:parameter | parametersJS push: parameter asJSArgument].	^(self primitiveNewWithParameters: parametersJS) counterpart! !!JSObjectProxy methodsFor: 'as yet unclassified'!asJSArgument	^ self! !!JSObjectProxy methodsFor: 'as yet unclassified'!break: message	self ifConnected: [		self console log: message.		self			alert: message;			debugger]! !!JSObjectProxy methodsFor: 'as yet unclassified'!isConnected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: [true]		ifNotConnected: [false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSObjectProxy class	instanceVariableNames: ''!!JSObjectProxy class methodsFor: 'as yet unclassified'!openExamples	Workspace new		contents: 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:', self examples;		openLabel: 'JSBridge'.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackArgs	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackArgs 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primInitCallbacks: semaIndex	<primitive: 117> #(JavaScriptPlugin primitiveInitCallbacks 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackBlock	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackBlock 0 0) at: 1.	^nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!handleCallback	| block |	block := self primGetActiveCallbackBlock.	block		ifNil: [			Transcript				cr;				nextPutAll: 'active JavaScript callback block got nulled';				endEntry]		ifNotNil: [			| args result |			args := self primGetActiveCallbackArgs.			[result := block valueWithArguments: args] ifError: [:error :receiver |				ActiveWorld halt: error asString.				result := JS Error: error asString].			self primReturnFromCallback: result]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!examples	| comment |	"Create symbols in advance"	('alert: console log: document getElementsByTagName: navigator Object keys: Function length setTimeout:ms: createElement: appendChild: jQuery: hide: show: css: click: appendTo:'		findTokens: ' ') do: [:s | s asSymbol].	comment := self organization classComment asString.	^ comment copyFrom: (comment indexOf: $") to: comment size.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initialize	"Create the JS global"	Smalltalk at: #JS put: self basicNew.	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self openExamples]		ifFalse: [[self openExamples] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!evaluate: source	^(JS Function new: 'return ', source, ';') call! !!JSObjectProxy class methodsFor: 'as yet unclassified'!callbackProcess	[true] whileTrue: [		CallbackSemaphore wait.		[self handleCallback] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initCallbacks	CallbackProcess ifNotNil: [CallbackProcess terminate. CallbackProcess := nil].	CallbackSemaphore := Semaphore new.	self primInitCallbacks: (Smalltalk registerExternalObject: CallbackSemaphore).	CallbackProcess := [self callbackProcess] newProcess		priority: Processor lowIOPriority; resume.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primReturnFromCallback: returnValue	<primitive: 117> #(JavaScriptPlugin primitiveReturnFromCallback 0 0) at: 1.	(self primGetError = 'No active callback') ifFalse: [self primitiveFailed]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!new	self error: 'Use "JS Object new" to create a new JavaScript object'.! !Unix32Platform subclass: #WebPlatform	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!!WebPlatform methodsFor: 'accessing'!family	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."	#Web! !!WebPlatform methodsFor: 'accessing'!getPwdViaFFI: buffer size: bufferSize	buffer		replaceFrom: 1		to: '/SqueakJS' size		with: '/SqueakJS';		at: '/SqueakJS' size + 1		put: (Character value: 0)! !!WebPlatform methodsFor: 'accessing' stamp: 'pk 11/14/2019 21:00'!currentWorkingDirectoryPathWithBufferSize: ignored	^'/'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebPlatform class	instanceVariableNames: ''!!WebPlatform class methodsFor: 'private'!isActivePlatform	"Answer whether the receiver is the active platform"	^ self currentPlatformName = 'Web'! !UnixResolver subclass: #WebResolver	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebResolver class	instanceVariableNames: ''!!WebResolver class methodsFor: 'accessing' stamp: 'pk 11/14/2019 21:04'!platformName	^  'Web'! !JSObjectProxy initialize!