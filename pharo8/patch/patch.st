#('FFI-Kernel' 'UnifiedFFI' 'Alien-Core') do: [ :name | name asPackage definedClasses do: [ :aClass |  SessionManager default unregisterClassNamed: aClass name ] ].SessionManager default unregisterClassNamed: #FT2Handle.SessionManager default unregisterClassNamed: #Stdio.SessionManager default unregisterClassNamed: #OmStoreFactory.SessionManager default unregisterClassNamed: #OmSessionStore.SessionManager default unregisterClassNamed: #LGitLibrary.EpMonitor current disable.FreeTypeSystemSettings loadFt2Library: false.	World submorphs do: #delete.	TaskbarMorph reset.	MenubarMorph reset.!Object subclass: #JSObjectProxy	instanceVariableNames: ''	classVariableNames: 'CallbackProcess CallbackSemaphore'	package: 'System-Platforms-Web'!!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey put: aValue	"set a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAtPut 0 0) at: 1.	^ self with: aValue retry: [:val | self at: aKey put: val]! !!JSObjectProxy methodsFor: 'as yet unclassified'!asString	"Convert me to a string"	<primitive: 117> #(JavaScriptPlugin primitiveAsString 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!removeKey: key	^self evaluate: 'delete this.', key! !!JSObjectProxy methodsFor: 'as yet unclassified'!evaluate: source	| result |		JS at: #messageReceiver put: self.	(JS messageReceiver)		at: #messageFunction		put: (JS Function new: source).	result := JS messageReceiver messageFunction.	(JS Function new: 'delete messageReceiver.messageFunction') call.	(JS Function new: 'delete messageReceiver') call.			^result! !!JSObjectProxy methodsFor: 'as yet unclassified'!typeof	"Answer my jsObject's type (a string)"	<primitive: 117> #(JavaScriptPlugin primitiveTypeof 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!constructor	^self at: 'constructor'! !!JSObjectProxy methodsFor: 'as yet unclassified'!printOn: aStream	[aStream nextPutAll: self asString]		ifError: [:err :rcvr | ^ super printOn: aStream].! !!JSObjectProxy methodsFor: 'as yet unclassified'!asSymbol	^self asString asSymbol! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected ifNotConnected: notConnected	[self top]		on: Error		do: [:exception | ^notConnected value].	^connected value! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveSqueakAsJSObject: object	<primitive: 117> #(JavaScriptPlugin primitiveSqueakAsJSObject 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey	"get a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAt 0 0) at: 1.	(error := self primGetError)		ifNotNil: [^ self error: error].	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!asArray	| array |		array := Array new: self length.		1		to: self length		do: [:index |			array				at: index				put: (self at: index - 1)].				^array! !!JSObjectProxy methodsFor: 'as yet unclassified'!name	^self evaluate: 'return this.name'! !!JSObjectProxy methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!counterpart	"Answer an instance of a Smalltalk class that corresponds to my constructor, and which provides API documentation and live interaction."	^JSObject counterpartFor: self! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveNewWithParameters: parameters	<primitive: 117> #(JavaScriptPlugin primitiveNewWithParameters 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!stringify	^(JS window JSON stringify: self) asString! !!JSObjectProxy methodsFor: 'as yet unclassified'!isIdenticalTo: proxy	| object |		object := JS Object new.	object		at: #firstThing put: self;		at: #secondThing put: proxy;		at: #comparison put: (JS Function new: 'return this.firstThing == this.secondThing').			^object comparison! !!JSObjectProxy methodsFor: 'as yet unclassified'!foobly	<primitive: 'primitiveFoobly' module: 'JavaScriptPlugin'>	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!with: argument retry: retryBlock	| error |	(error := self primGetError) ifNil: [^ self error: 'JSBridge error'].	(error beginsWith: 'asJSArgument') ifTrue: [		^retryBlock value: argument asJSArgument].	(error beginsWith: 'CallbackSemaphore') ifTrue: [		self class initCallbacks.		^retryBlock value: argument].	self error: error.! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: connected		ifNotConnected: [nil]! !!JSObjectProxy methodsFor: 'as yet unclassified'!doesNotUnderstand: aMessage	"Call a function, or get/set an existing property. The function name / property name is the message selector up to the first colon. If the function name is 'new', create a new instance and call the constructor with args."	<primitive: 117> #(JavaScriptPlugin primitiveDoUnderstand 0 0) at: 1.	^self with: aMessage arguments retry: [:args |		self doesNotUnderstand: (Message selector: aMessage selector arguments: args)]! !!JSObjectProxy methodsFor: 'as yet unclassified'!debugger	(JS Function new: 'debugger') call! !!JSObjectProxy methodsFor: 'as yet unclassified'!newWithParameters: parameters	| parametersJS |		parametersJS := JS Array new.	parameters do: [:parameter | parametersJS push: parameter asJSArgument].	^(self primitiveNewWithParameters: parametersJS) counterpart! !!JSObjectProxy methodsFor: 'as yet unclassified'!asJSArgument	^ self! !!JSObjectProxy methodsFor: 'as yet unclassified'!break: message	self ifConnected: [		self console log: message.				self			alert: message;			debugger]! !!JSObjectProxy methodsFor: 'as yet unclassified'!isConnected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: [true]		ifNotConnected: [false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSObjectProxy class	instanceVariableNames: ''!!JSObjectProxy class methodsFor: 'as yet unclassified'!openExamples	Workspace new		contents: 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:', self examples;		openLabel: 'JSBridge'.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackArgs	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackArgs 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primInitCallbacks: semaIndex	<primitive: 117> #(JavaScriptPlugin primitiveInitCallbacks 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackBlock	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackBlock 0 0) at: 1.	^nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!handleCallback	| block |		block := self primGetActiveCallbackBlock.	block		ifNil: [			Transcript				cr;				nextPutAll: 'active JavaScript callback block got nulled';				endEntry]		ifNotNil: [			| args result |						args := self primGetActiveCallbackArgs.			[result := block valueWithArguments: args] ifError: [:error :receiver |				ActiveWorld halt: error asString.				result := JS Error: error asString].						self primReturnFromCallback: result]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!examples	| comment |	"Create symbols in advance"	('alert: console log: document getElementsByTagName: navigator Object keys: Function length setTimeout:ms: createElement: appendChild: jQuery: hide: show: css: click: appendTo:'		findTokens: ' ') do: [:s | s asSymbol].	comment := self organization classComment asString.	^ comment copyFrom: (comment indexOf: $") to: comment size.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initialize	"Create the JS global"	Smalltalk at: #JS put: self basicNew.	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self openExamples]		ifFalse: [[self openExamples] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!evaluate: source	^(JS Function new: 'return ', source, ';') call! !!JSObjectProxy class methodsFor: 'as yet unclassified'!callbackProcess	[true] whileTrue: [		CallbackSemaphore wait.		[self handleCallback] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initCallbacks	CallbackProcess ifNotNil: [CallbackProcess terminate. CallbackProcess := nil].	CallbackSemaphore := Semaphore new.	self primInitCallbacks: (Smalltalk registerExternalObject: CallbackSemaphore).	CallbackProcess := [self callbackProcess] newProcess		priority: Processor lowIOPriority; resume.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primReturnFromCallback: returnValue	<primitive: 117> #(JavaScriptPlugin primitiveReturnFromCallback 0 0) at: 1.	(self primGetError = 'No active callback') ifFalse: [self primitiveFailed]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!new	self error: 'Use "JS Object new" to create a new JavaScript object'.! !OSPlatform subclass: #WebPlatform	instanceVariableNames: ''	classVariableNames: ''	package: 'System-Platforms-Web'!!UnixPlatform methodsFor: 'accessing'!currentWorkingDirectoryPathWithBufferSize: ignored	^'/SqueakJS'! !!UnixPlatform methodsFor: 'accessing'!getPwdViaFFI: buffer size: bufferSize	buffer		replaceFrom: 1		to: '/SqueakJS' size		with: '/SqueakJS';		at: '/SqueakJS' size + 1		put: (Character value: 0)! !!UnixPlatform methodsFor: 'accessing'!family	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."	^ #Web! !!UnixPlatform methodsFor: 'accessing'!defaultMaximumPathLength	"This method returns the default maximum path length for the getCurrentWorkingDirectory implementation"	 ^4096! !!UnixPlatform methodsFor: 'accessing'!menuShortcutString	^ 'cmd'! !!UnixPlatform methodsFor: 'accessing'!lineEnding	^ String lf! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebPlatform class	instanceVariableNames: ''!!UnixPlatform class methodsFor: 'private'!isActivePlatform	"Answer whether the receiver is the active platform"	^ self currentPlatformName = 'Web'! !JSObjectProxy initialize!'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:14:44.976353 pm'!!LargePositiveInteger methodsFor: 'bit manipulation'!hashMultiply	"This is a multiplication of hashes by 1664525 mod 2^28 written to avoid overflowing into large integers.	 The primitive is able to perform the operation with modulo arihmetic.		Example of usage:	  hash	    ^ (super hash + variableName hash) hashMultiply 		"		"<primitive: 159>"	"Truncate to 28 bits and try again"	^(self bitAnd: 16rFFFFFFF) hashMultiply! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:14:55.071364 pm'!'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:15:03.677653 pm'!!SmallInteger methodsFor: 'bit manipulation'!hashMultiply	"This is a multiplication of hashes by 1664525 mod 2^28 written to avoid overflowing into large integers.	 The primitive is able to perform the operation with modulo arihmetic.		Example of usage:	  hash	    ^ (super hash + variableName hash) hashMultiply 		"			"<primitive: 159>"	| low |	low := self bitAnd: 16383.	^(16r260D * low + ((16r260D * (self bitShift: -14) + (16r0065 * low) bitAnd: 16383) * 16384))			bitAnd: 16r0FFFFFFF! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:15:13.469981 pm'!!VirtualMachine methodsFor: 'testing'!isRunningCogit	"Returns true if we're running on the Cog JIT	 (vmParameterAt: 46 is the size of the machine code zone)"	JS ifConnected: [ ^false ]."SQUEAKJS"	^[(self parameterAt: 46) > 0] on: Error do:[:ex| ex return: false]! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:15:22.493507 pm'!!VirtualMachine methodsFor: 'parameters'!parameterAt: parameterIndex	"parameterIndex is a positive integer corresponding to one of the VM's internal	parameter/metric registers.  Answer with the current value of that register.	Fail if parameterIndex has no corresponding register.	VM parameters are numbered as follows:	1	end (v3)/size(Spur) of old-space (0-based, read-only)	2	end (v3)/size(Spur) of young/new-space (read-only)	3	end (v3)/size(Spur) of heap (read-only)	4	nil (was allocationCount (read-only))	5	nil (was allocations between GCs (read-write)	6	survivor count tenuring threshold (read-write)	7	full GCs since startup (read-only)	8	total milliseconds in full GCs since startup (read-only)	9	incremental GCs (SqueakV3) or scavenges (Spur) since startup (read-only)	10	total milliseconds in incremental GCs (SqueakV3) or scavenges (Spur) since startup (read-only)	11	tenures of surving objects since startup (read-only)	12-20 were specific to ikp's JITTER VM, now 12-19 are open for use	20	utc microseconds at VM start-up (actually at time initialization, which precedes image load).	21	root table size (read-only)	22	root table overflows since startup (read-only)	23	bytes of extra memory to reserve for VM buffers, plugins, etc (stored	in image file header).	24	memory threshold above which shrinking object memory (rw)	25	memory headroom when growing object memory (rw)	26	interruptChecksEveryNms - force an ioProcessEvents every N milliseconds	(rw) 27	number of times mark loop iterated for current IGC/FGC (read-only)	includes ALL marking	28	number of times sweep loop iterated for current IGC/FGC (read-only)	29	number of times make forward loop iterated for current IGC/FGC	(read-only) 30	number of times compact move loop iterated for current	IGC/FGC (read-only)	31	number of grow memory requests (read-only)	32	number of shrink memory requests (read-only)	33	number of root table entries used for current IGC/FGC (read-only)	34	number of allocations done before current IGC/FGC (read-only)	35	number of survivor objects after current IGC/FGC (read-only)	36	millisecond clock when current IGC/FGC completed (read-only)	37	number of marked objects for Roots of the world, not including Root	Table entries for current IGC/FGC (read-only)	38	milliseconds taken by current IGC (read-only)	39	Number of finalization signals for Weak Objects pending when current	IGC/FGC completed (read-only)	40	BytesPerOop for this image	41	imageFormatVersion for the VM	42	number of stack pages in use	43	desired number of stack pages (stored in image file header, max 65535)	44	size of eden, in bytes	45	desired size of eden, in bytes (stored in image file header)	46	machine code zone size, in bytes (Cog only; otherwise nil)	47	desired machine code zone size (stored in image file header; Cog only;	otherwise nil)	48	various header flags. See getCogVMFlags.	49	max size the image promises to grow the external semaphore table to (0	sets to default, which is 256 as of writing)	50-51 nil; reserved for VM parameters that persist in the image (such as	eden above)	52	root table capacity	53	number of segments (Spur only; otherwise nil)	54	total size of free old space (Spur only, otherwise nil)	55	ratio of growth and image size at or above which a GC will be performed	post scavenge	56	number of process switches since startup (read-only)	57	number of ioProcessEvents calls since startup (read-only)	58	number of ForceInterruptCheck calls since startup (read-only)	59	number of check event calls since startup (read-only)	60	number of stack page overflows since startup (read-only)	61	number of stack page divorces since startup (read-only)	62	compiled code compactions since startup (read-only; Cog only; otherwise nil)	63	total milliseconds in compiled code compactions since startup	(read-only; Cog only; otherwise nil)	64	the number of methods that currently have jitted machine-code	65	whether the VM supports a certain feature, MULTIPLE_BYTECODE_SETS is bit 0, IMMTABILITY is bit 1	66	the byte size of a stack page	67	the max allowed size of old space (Spur only; nil otherwise; 0 implies	no limit except that of the underlying platform)	68	the average number of live stack pages when scanned by GC (at	scavenge/gc/become et al)	69	the maximum number of live stack pages when scanned by GC (at	scavenge/gc/become et al)	70	the vmProxyMajorVersion (the interpreterProxy VM_MAJOR_VERSION)	71	the vmProxyMinorVersion (the interpreterProxy VM_MINOR_VERSION)"	<primitive: 254>	^  nil "SQUEAKJS"! !Object subclass: #JSObjectProxy	instanceVariableNames: ''	classVariableNames: 'CallbackProcess CallbackSemaphore'	package: 'WebPlatform'!!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey put: aValue	"set a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAtPut 0 0) at: 1.	^ self with: aValue retry: [:val | self at: aKey put: val]! !!JSObjectProxy methodsFor: 'as yet unclassified'!asString	"Convert me to a string"	<primitive: 117> #(JavaScriptPlugin primitiveAsString 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!removeKey: key	^self evaluate: 'delete this.', key! !!JSObjectProxy methodsFor: 'as yet unclassified'!evaluate: source	| result |		JS at: #messageReceiver put: self.	(JS messageReceiver)		at: #messageFunction		put: (JS Function new: source).	result := JS messageReceiver messageFunction.	(JS Function new: 'delete messageReceiver.messageFunction') call.	(JS Function new: 'delete messageReceiver') call.			^result! !!JSObjectProxy methodsFor: 'as yet unclassified'!typeof	"Answer my jsObject's type (a string)"	<primitive: 117> #(JavaScriptPlugin primitiveTypeof 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!constructor	^self at: 'constructor'! !!JSObjectProxy methodsFor: 'as yet unclassified'!printOn: aStream	[aStream nextPutAll: self asString]		ifError: [:err :rcvr | ^ super printOn: aStream].! !!JSObjectProxy methodsFor: 'as yet unclassified'!asSymbol	^self asString asSymbol! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected ifNotConnected: notConnected	[self top]		on: Error		do: [:exception | ^notConnected value].	^connected value! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveSqueakAsJSObject: object	<primitive: 117> #(JavaScriptPlugin primitiveSqueakAsJSObject 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!at: aKey	"get a property"	| error |	<primitive: 117> #(JavaScriptPlugin primitiveAt 0 0) at: 1.	(error := self primGetError)		ifNotNil: [^ self error: error].	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!asArray	| array |		array := Array new: self length.		1		to: self length		do: [:index |			array				at: index				put: (self at: index - 1)].				^array! !!JSObjectProxy methodsFor: 'as yet unclassified'!name	^self evaluate: 'return this.name'! !!JSObjectProxy methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!counterpart	"Answer an instance of a Smalltalk class that corresponds to my constructor, and which provides API documentation and live interaction."	^JSObject counterpartFor: self! !!JSObjectProxy methodsFor: 'as yet unclassified'!primitiveNewWithParameters: parameters	<primitive: 117> #(JavaScriptPlugin primitiveNewWithParameters 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy methodsFor: 'as yet unclassified'!stringify	^(JS window JSON stringify: self) asString! !!JSObjectProxy methodsFor: 'as yet unclassified'!isIdenticalTo: proxy	| object |		object := JS Object new.	object		at: #firstThing put: self;		at: #secondThing put: proxy;		at: #comparison put: (JS Function new: 'return this.firstThing == this.secondThing').			^object comparison! !!JSObjectProxy methodsFor: 'as yet unclassified'!foobly	<primitive: 'primitiveFoobly' module: 'JavaScriptPlugin'>	^ nil! !!JSObjectProxy methodsFor: 'as yet unclassified'!with: argument retry: retryBlock	| error |	(error := self primGetError) ifNil: [^ self error: 'JSBridge error'].	(error beginsWith: 'asJSArgument') ifTrue: [		^retryBlock value: argument asJSArgument].	(error beginsWith: 'CallbackSemaphore') ifTrue: [		self class initCallbacks.		^retryBlock value: argument].	self error: error.! !!JSObjectProxy methodsFor: 'as yet unclassified'!ifConnected: connected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: connected		ifNotConnected: [nil]! !!JSObjectProxy methodsFor: 'as yet unclassified'!doesNotUnderstand: aMessage	"Call a function, or get/set an existing property. The function name / property name is the message selector up to the first colon. If the function name is 'new', create a new instance and call the constructor with args."	<primitive: 117> #(JavaScriptPlugin primitiveDoUnderstand 0 0) at: 1.	^self with: aMessage arguments retry: [:args |		self doesNotUnderstand: (Message selector: aMessage selector arguments: args)]! !!JSObjectProxy methodsFor: 'as yet unclassified'!debugger	(JS Function new: 'debugger') call! !!JSObjectProxy methodsFor: 'as yet unclassified'!newWithParameters: parameters	| parametersJS |		parametersJS := JS Array new.	parameters do: [:parameter | parametersJS push: parameter asJSArgument].	^(self primitiveNewWithParameters: parametersJS) counterpart! !!JSObjectProxy methodsFor: 'as yet unclassified'!asJSArgument	^ self! !!JSObjectProxy methodsFor: 'as yet unclassified'!break: message	self ifConnected: [		self console log: message.				self			alert: message;			debugger]! !!JSObjectProxy methodsFor: 'as yet unclassified'!isConnected	"If SqueakJS is running my object memory, evaluate aBlockClosure."	^self		ifConnected: [true]		ifNotConnected: [false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSObjectProxy class	instanceVariableNames: ''!!JSObjectProxy class methodsFor: 'as yet unclassified'!openExamples	Workspace new		contents: 'Besides running regular Squeak images, SqueakJS can directly use JavaScript. It can interact with the DOM, access JavaScript libraries, and use Smalltalk code to create an interactive HTML interface. Try these examples:', self examples;		openLabel: 'JSBridge'.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackArgs	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackArgs 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primInitCallbacks: semaIndex	<primitive: 117> #(JavaScriptPlugin primitiveInitCallbacks 0 0) at: 1.	^ self primitiveFailed! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetActiveCallbackBlock	<primitive: 117> #(JavaScriptPlugin primitiveGetActiveCallbackBlock 0 0) at: 1.	^nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!handleCallback	| block |		block := self primGetActiveCallbackBlock.	block		ifNil: [			Transcript				cr;				nextPutAll: 'active JavaScript callback block got nulled';				endEntry]		ifNotNil: [			| args result |						args := self primGetActiveCallbackArgs.			[result := block valueWithArguments: args] ifError: [:error :receiver |				ActiveWorld halt: error asString.				result := JS Error: error asString].						self primReturnFromCallback: result]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!examples	| comment |	"Create symbols in advance"	('alert: console log: document getElementsByTagName: navigator Object keys: Function length setTimeout:ms: createElement: appendChild: jQuery: hide: show: css: click: appendTo:'		findTokens: ' ') do: [:s | s asSymbol].	comment := self organization classComment asString.	^ comment copyFrom: (comment indexOf: $") to: comment size.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initialize	"Create the JS global"	Smalltalk at: #JS put: self basicNew.	"If we have the plugin, show workspace"	[JS window] ifError: [:err :rcvr | ^self].	Smalltalk isMorphic		ifTrue: [self openExamples]		ifFalse: [[self openExamples] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!evaluate: source	^(JS Function new: 'return ', source, ';') call! !!JSObjectProxy class methodsFor: 'as yet unclassified'!callbackProcess	[true] whileTrue: [		CallbackSemaphore wait.		[self handleCallback] fork].! !!JSObjectProxy class methodsFor: 'as yet unclassified'!initCallbacks	CallbackProcess ifNotNil: [CallbackProcess terminate. CallbackProcess := nil].	CallbackSemaphore := Semaphore new.	self primInitCallbacks: (Smalltalk registerExternalObject: CallbackSemaphore).	CallbackProcess := [self callbackProcess] newProcess		priority: Processor lowIOPriority; resume.! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primGetError	<primitive: 117> #(JavaScriptPlugin primitiveGetError 0 0) at: 1.	^ nil! !!JSObjectProxy class methodsFor: 'as yet unclassified'!primReturnFromCallback: returnValue	<primitive: 117> #(JavaScriptPlugin primitiveReturnFromCallback 0 0) at: 1.	(self primGetError = 'No active callback') ifFalse: [self primitiveFailed]! !!JSObjectProxy class methodsFor: 'as yet unclassified'!new	self error: 'Use "JS Object new" to create a new JavaScript object'.! !OSPlatform subclass: #WebPlatform	instanceVariableNames: ''	classVariableNames: ''	package: 'WebPlatform'!!WebPlatform methodsFor: 'accessing'!currentWorkingDirectoryPathWithBufferSize: ignored	^'/SqueakJS'! !!WebPlatform methodsFor: 'accessing'!getPwdViaFFI: buffer size: bufferSize	buffer		replaceFrom: 1		to: '/SqueakJS' size		with: '/SqueakJS';		at: '/SqueakJS' size + 1		put: (Character value: 0)! !!WebPlatform methodsFor: 'accessing'!family	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."	#Web! !!WebPlatform methodsFor: 'accessing'!defaultMaximumPathLength	"This method returns the default maximum path length for the getCurrentWorkingDirectory implementation"	 ^4096! !!WebPlatform methodsFor: 'accessing'!menuShortcutString	^ 'cmd'! !!WebPlatform methodsFor: 'accessing'!lineEnding	^ String lf! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WebPlatform class	instanceVariableNames: ''!!WebPlatform class methodsFor: 'private'!isActivePlatform	"Answer whether the receiver is the active platform"	^ self currentPlatformName = 'Web'! !!WebPlatform class methodsFor: 'private'!prepareImage	<script>		World submorphs do: #delete.	TaskbarMorph reset.	MenubarMorph reset.! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 12 November 2019 at 11:59:13.815138 pm'!!ExternalStructure class methodsFor: 'system startup'!install	"Resuming the image on another architecture may require a re-compilation of structure layout."	| newPlatform |	newPlatform := Smalltalk platformName.        	JS ifConnected: [^ self].	PreviousPlatform = newPlatform		ifFalse:			[self recompileStructures.			PreviousPlatform := newPlatform]! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:10:21.67697 am'!!FFIMethodRegistry class methodsFor: 'system startup'!resetAll	"I'm reseting each shutdown and startup because like that I can be sure a complete cleanup is done,	 because many things can change:		- platform change		- working directory change (and then libraries not found)		- indirect functions needs to be recalculated.	I am not supposed to be performed when image is just saved to avoid possible problem which can happen when we reset all caches and continue to work"        	JS ifConnected: [^ self].        self uniqueInstance reset.	FFICallbackFunctionResolution reset.	FFIExternalStructure resetAllStructures.	uniqueInstance := nil.! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:19:02.598498 am'!!FFICallout class methodsFor: 'class initialization'!initialize       	^ self! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:39:38.639779 am'!!VirtualMachine methodsFor: 'attributes'!wordSize	^ 4! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:42:40.060061 am'!!SystemVersion methodsFor: 'accessing - version strings'!shortVersionString	"Print a short version string."	^ 'Pharo8.0.0'! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:47:03.569947 am'!!SmalltalkImage methodsFor: 'sources, change log'!lastUpdateString	"SmalltalkImage current lastUpdateString"	^'Build information: '! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 12:55:08.005901 am'!!File class methodsFor: 'private'!primFileMasks	"Answer an array of well known masks:	1: S_IFMT	2: S_IFSOCK	3: S_IFLNK	4: S_IFREG	5: S_IFBLK	6: S_IFDIR	7: S_IFCHR	8: S_IFIFO	For more information, see: http://man7.org/linux/man-pages/man2/stat.2.html	"	^  #(61440 49152 40960 32768 24576 16384 8192 4096)! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 1:00:08.686031 am'!!VirtualMachine methodsFor: 'accessing'!interpreterSourceVersion	"The use of this primitive not recommended. Not all VMs providing that"	"Answer a string corresponding to the version of the interpreter source.	This represents the version level of the Smalltalk source code (interpreter	and various plugins) that is translated to C by a CCodeGenerator, as distinct	from the external platform source code, typically written in C and managed	separately for each platform. An optional primitive is invoked that may not	be available on all virtual machines."	"Smalltalk vm interpreterSourceVersion"	^  'VM: 201902062351 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed Feb 6 15:51:18 2019 CommitHash: a838346b Plugins: 201902062351 https://github.com/OpenSmalltalk/opensmalltalk-vm.git'! ! 'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 1:08:17.344491 am'!!LocalTimeZone methodsFor: 'primitives'!primOffset	"The offset from UTC in minutes, with positive offsets being towards the east.	(San Francisco is in UTC -07*60 and Paris is in UTC +02*60 (daylight savings is not in effect)."	^ 0! !        'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 1:08:21.062115 am'!!Locale methodsFor: 'system primitives'!primTimezone	"The offset from UTC in minutes, with positive offsets being towards the east.	(San Francisco is in UTC -07*60 and Paris is in UTC +02*60 (daylight savings is not in effect)."	^0! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 8:53:55.855172 pm'!!UnixResolver class methodsFor: 'accessing'!platformName	^  'Web'! !'From Pharo8.0.0 of 11 November 2019 [Build information: Pharo-8.0.0+build.969.sha.27fab439c5121fbfdeda11e899a130bc38ebb1a6 (32 Bit)] on 13 November 2019 at 9:27:43.84735 pm'!!DiskStore class methodsFor: 'system startup'!checkVMVersion	! !JSObjectProxy initialize!WebPlatform  prepareImage